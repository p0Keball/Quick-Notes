//L·∫•y URL hi·ªán t·∫°i
let currentURL = "";
let editingNoteId = null;
let quill = null;

//Kh·ªüi t·∫°o khi popup m·ªü
document.addEventListener("DOMContentLoaded", async () => {
  // Kh·ªüi t·∫°o Quill editor
  initQuillEditor();

  await get_CurrentTab();
  await loadNotes();
});

//#region Kh·ªüi t·∫°o Quill Editor
function initQuillEditor() {
  const editorElement = document.getElementById("note_Content");
  if (editorElement && !quill) {
    quill = new Quill("#note_Content", {
      theme: "snow",
      modules: {
        toolbar: ".editor_toolbar",
      },
      placeholder: "Nh·∫≠p vƒÉn b·∫£n ·ªü ƒë√¢y...",
    });
  }
  return quill;
}
//#endregion

//#region L·∫Øng nghe khi ƒë·ªïi tab

// Khi user chuy·ªÉn sang tab kh√°c
chrome.tabs.onActivated.addListener(async (activeInfo) => {
  await get_CurrentTab();
  await loadNotes();

  // Reset form n·∫øu ƒëang edit
  if (editingNoteId) {
    document.getElementById("note_Title").value = "";
    if (quill) {
      quill.setText("");
    }
    editingNoteId = null;
    document.getElementById("btn_save").textContent = "üíæ L∆∞u ghi ch√∫";
  }
});

// Khi URL trong tab hi·ªán t·∫°i thay ƒë·ªïi (user navigate)
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
  if (changeInfo.url) {
    chrome.tabs.query({ active: true, currentWindow: true }, async (tabs) => {
      if (tabs[0] && tabs[0].id === tabId) {
        await get_CurrentTab();
        await loadNotes();

        // Reset form n·∫øu ƒëang edit
        if (editingNoteId) {
          document.getElementById("note_Title").value = "";
          if (quill) {
            quill.setText("");
          }
          editingNoteId = null;
          document.getElementById("btn_save").textContent = "üíæ L∆∞u ghi ch√∫";
        }
      }
    });
  }
});
//#endregion

//#region L·∫•y URL
async function get_CurrentTab() {
  const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
  currentURL = new URL(tab.url).hostname;
  document.getElementById("current_url").textContent = currentURL;
}
//#endregion

//#region Load danh s√°ch ghi ch√∫

//#region Load ghi ch√∫ ƒë√£ l∆∞u trong chrom storage
async function loadNotes() {
  const result = await chrome.storage.local.get(["notes"]);
  const notes = result.notes || {};
  const currentNotes = notes[currentURL] || [];

  const notesList = document.getElementById("notesList");
  document.getElementById("noteCount").textContent = currentNotes.length;

  // C·∫≠p nh·∫≠t stats m·ªói khi load notes
  await updateStats();

  if (currentNotes.length === 0) {
    notesList.innerHTML = `
            <div class="empty-state">
                <svg fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"></path>
                    <path fill-rule="evenodd" d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z" clip-rule="evenodd"></path>
                </svg>
                <p>Ch∆∞a c√≥ ghi ch√∫ n√†o</p>
            </div>
        `;
    return;
  }

  currentNotes.sort(
    (a, b) => new Date(b.last_Modified) - new Date(a.last_Modified)
  );

  notesList.innerHTML = currentNotes
    .map((note) => {
      // T·∫°o div t·∫°m ƒë·ªÉ hi·ªÉn th·ªã HTML an to√†n (ch·ªâ cho ph√©p text formatting)
      const tempDiv = document.createElement("div");
      tempDiv.innerHTML = note.content;

      // X√≥a t·∫•t c·∫£ c√°c th·∫ª nguy hi·ªÉm (input, form, script, etc.)
      const dangerousTags = [
        "input",
        "textarea",
        "form",
        "button",
        "script",
        "iframe",
        "object",
        "embed",
      ];
      dangerousTags.forEach((tag) => {
        const elements = tempDiv.querySelectorAll(tag);
        elements.forEach((el) => el.remove());
      });

      return `
        <div class="note-item">
            <div class="note-title">${escapeHtml(note.title)}</div>
            <div class="note-content">${tempDiv.innerHTML}</div>
            <div class="note-meta">
                <span>${formatDate(note.last_Modified)}</span>
                <div class="note-actions">
                    <button class="btn-small btn-edit" data-id="${
                      note.id
                    }">‚úèÔ∏è S·ª≠a</button>
                    <button class="btn-small btn-delete" data-id="${
                      note.id
                    }">üóëÔ∏è X√≥a</button>
                </div>
            </div>
        </div>
    `;
    })
    .join("");

  //G·∫Øn s·ª± ki·ªán cho c√°c n√∫t
  document.querySelectorAll(".btn-edit").forEach((btn) => {
    btn.addEventListener("click", (e) => editNote(e.target.dataset.id));
  });

  document.querySelectorAll(".btn-delete").forEach((btn) => {
    btn.addEventListener("click", (e) => deleteNote(e.target.dataset.id));
  });
}

//#endregion

//#region Format ng√†y th√°ng
function formatDate(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const diff = now - date;

  // N·∫øu trong v√≤ng 1 ng√†y
  if (diff < 86400000) {
    const hours = Math.floor(diff / 3600000);
    if (hours < 1) {
      const minutes = Math.floor(diff / 60000);
      return `${minutes} ph√∫t tr∆∞·ªõc`;
    }
    return `${hours} gi·ªù tr∆∞·ªõc`;
  }

  // N·∫øu trong v√≤ng 7 ng√†y
  if (diff < 604800000) {
    const days = Math.floor(diff / 86400000);
    return `${days} ng√†y tr∆∞·ªõc`;
  }

  // Ng√†y c·ª• th·ªÉ
  return date.toLocaleDateString("vi-VN", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
}

//#endregion

//#endregion

//#region Thao t√°c v·ªõi note

//#region Hi·ªÉn th·ªã th√¥ng b√°o

function showNotification(message) {
  // T·∫°o element th√¥ng b√°o
  const notification = document.createElement("div");
  notification.textContent = message;
  notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #28a745;
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        font-weight: 600;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease;
    `;

  document.body.appendChild(notification);

  // X√≥a sau 3 gi√¢y
  setTimeout(() => {
    notification.style.animation = "slideOut 0.3s ease";
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}

//#endregion

//#region L∆∞u ghi ch√∫

document.getElementById("btn_save").addEventListener("click", async () => {
  if (!quill) {
    console.error("Quill editor ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
    return;
  }

  const title = document.getElementById("note_Title").value.trim();
  const content = quill.root.innerHTML.trim();

  if (!title || content === "<p><br></p>" || content === "") {
    alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ti√™u ƒë·ªÅ v√† n·ªôi dung!");
    return;
  }

  const note = {
    id: editingNoteId || Date.now().toString(),
    title,
    content,
    url: currentURL,
    timestamp: new Date().toISOString(),
    last_Modified: new Date().toISOString(),
  };

  //L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
  const result = await chrome.storage.local.get(["notes"]);
  const notes = result.notes || {};

  //Kh·ªüi t·∫°o m·∫£ng cho URL n·∫øu ch∆∞a c√≥
  if (!notes[currentURL]) {
    notes[currentURL] = [];
  }

  if (editingNoteId) {
    //C·∫≠p nh·∫≠t ghi ch√∫
    const index = notes[currentURL].findIndex((n) => n.id === editingNoteId);
    if (index !== -1) {
      notes[currentURL][index] = note;
    }
    editingNoteId = null;
  } else {
    //Th√™m ghi ch√∫ m·ªõi
    notes[currentURL].push(note);
  }

  //L∆∞u v√†o storage
  await chrome.storage.local.set({ notes });

  //Reset form
  document.getElementById("note_Title").value = "";
  quill.setText("");
  document.getElementById("btn_save").textContent = "üíæ L∆∞u ghi ch√∫";

  //Reload danh s√°ch
  await loadNotes();
  updateStats();

  //Hi·ªÉn th·ªã th√¥ng b√°o
  showNotification("‚úÖ ƒê√£ l∆∞u ghi ch√∫ th√†nh c√¥ng!");
});

//#endregion

//#region note list

//#region S·ª≠a ghi ch√∫
async function editNote(id) {
  if (!quill) {
    console.error("Quill editor ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
    return;
  }

  const result = await chrome.storage.local.get(["notes"]);
  const notes = result.notes || {};
  const currentNotes = notes[currentURL] || [];

  const note = currentNotes.find((n) => n.id === id);

  if (note) {
    document.getElementById("note_Title").value = note.title;
    // S·ª≠ d·ª•ng clipboard ƒë·ªÉ set HTML content v√†o Quill
    const delta = quill.clipboard.convert(note.content);
    quill.setContents(delta);
    editingNoteId = id;
    document.getElementById("btn_save").textContent = "üíæ C·∫≠p nh·∫≠t ghi ch√∫";

    //scroll l√™n tr√™n
    window.scrollTo({ top: 0, behavior: "smooth" });
  }
}

//#endregion

//#region X√≥a ghi ch√∫
async function deleteNote(id) {
  if (!confirm("‚ùå B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ghi ch√∫ n√†y?")) {
    return;
  }

  const result = await chrome.storage.local.get(["notes"]);
  const notes = result.notes || {};

  if (notes[currentURL]) {
    notes[currentURL] = notes[currentURL].filter((n) => n.id !== id);

    //X√≥a URL n·∫øu kh√¥ng c√≤n ghi ch√∫
    if (notes[currentURL].length === 0) delete notes[currentURL];
  }

  await chrome.storage.local.set({ notes });
  await loadNotes();
  updateStats();

  showNotification("üóëÔ∏è ƒê√£ x√≥a ghi ch√∫!");
}

//#endregion

//#endregion

//#endregion

//#region C·∫≠p nh·∫≠t extension stats

async function updateStats() {
  const result = await chrome.storage.local.get(["notes"]);
  const notes = result.notes || {};

  let totalNotes = 0;
  const totalPages = Object.keys(notes).length;

  for (const url in notes) {
    totalNotes += notes[url].length;
  }

  document.getElementById("total_notes").textContent = totalNotes;
  document.getElementById("total_pages").textContent = totalPages;
}

// Escape HTML ƒë·ªÉ tr√°nh XSS
function escapeHtml(text) {
  const div = document.createElement("div");
  div.textContent = text;
  return div.innerHTML;
}

//#endregion
